name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            artifact_name: windows-x64-msvc
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            artifact_name: linux-x64-gcc
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            artifact_name: linux-x64-clang
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            artifact_name: macos-arm64-clang
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-13
            artifact_name: macos-x64-clang
            c_compiler: clang
            cpp_compiler: clang++

    steps:
      - uses: actions/checkout@v4

      - name: Configure
        run: |
          cmake -B build \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_BUILD_TYPE=Release \
            -S .

      - name: Build
        run: cmake --build build --config Release

      - name: Test
        working-directory: build
        run: ctest --build-config Release

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "package" -Force
          Write-Host "Looking for Windows binaries to package..."
          
          # Find and copy executables
          Get-ChildItem -Path "build" -Recurse -Include "*.exe" | ForEach-Object {
            Write-Host "Found executable: $($_.FullName)"
            Copy-Item $_.FullName -Destination "package/"
          }
          
          # Find and copy DLLs
          Get-ChildItem -Path "build" -Recurse -Include "*.dll" | ForEach-Object {
            Write-Host "Found DLL: $($_.FullName)"
            Copy-Item $_.FullName -Destination "package/"
          }
          
          # List what we're packaging
          Write-Host "Files to package:"
          Get-ChildItem -Path "package/"
          
          # Create ZIP archive
          if ((Get-ChildItem -Path "package/").Count -gt 0) {
            Compress-Archive -Path "package/*" -DestinationPath "${{ matrix.artifact_name }}.zip" -Force
            Write-Host "Created archive: ${{ matrix.artifact_name }}.zip"
          } else {
            Write-Host "No files found to package"
            # Create empty zip
            Compress-Archive -Path "package" -DestinationPath "${{ matrix.artifact_name }}.zip" -Force
          }

      - name: Package (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p package
          echo "Looking for Unix binaries to package..."
          
          # Find executable files
          find build -type f -perm +111 ! -name "*.a" ! -name "*.so*" ! -name "*.dylib*" 2>/dev/null | while read -r f; do
            if file "$f" 2>/dev/null | grep -qE "Mach-O|ELF|executable"; then
              echo "Found executable: $f"
              cp "$f" package/
            fi
          done
          
          # List what we're packaging
          echo "Files to package:"
          ls -la package/
          
          # Create tar.gz archive
          if [ "$(ls -A package/)" ]; then
            tar -czf ${{ matrix.artifact_name }}.tar.gz -C package .
            echo "Created archive: ${{ matrix.artifact_name }}.tar.gz"
          else
            echo "No files found to package, creating empty archive"
            tar -czf ${{ matrix.artifact_name }}.tar.gz -T /dev/null
          fi

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.zip
            ${{ matrix.artifact_name }}.tar.gz
          if-no-files-found: ignore
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f -ls

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --generate-notes \
            --repo ${{ github.repository }}

      - name: Upload Release Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in artifacts/*/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              gh release upload ${{ github.ref_name }} "$file" --repo ${{ github.repository }}
            fi
          done