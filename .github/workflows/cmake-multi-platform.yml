name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
    tags: [ "v*" ]  # Trigger on version tags
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Debug - list build output
        run: ls -R ${{ steps.strings.outputs.build-output-dir }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/**/myproject*

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Looking for artifact directories:"
          find . -type d -name "*-*-*" | head -10

      - name: Create release archives
        run: |
          mkdir -p release
          echo "Looking for artifact directories..."
          ls -la
          for item in artifacts/*; do
            if [ -d "$item" ]; then
              name=$(basename "$item")
              echo "Processing directory: $name"
              ls -la "$item"
              if [[ "$name" == *"ubuntu"* ]]; then
                tar -czf "release/${name}.tar.gz" -C "$item" .
              elif [[ "$name" == *"windows"* ]]; then
                zip -r "release/${name}.zip" "$item"
              fi
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}